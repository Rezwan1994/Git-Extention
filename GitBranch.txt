Git Branch:

The diagram above visualizes a repository with two isolated lines of development, one for a little feature, 
and one for a longer-running feature. By developing them in branches, it’s not only possible to work on both of them in parallel,
but it also keeps the main master branch free from questionable code.

The implementation behind Git branches is much more lightweight than other version control system models.
Instead of copying files from directory to directory, Git stores a branch as a reference to a commit. 
In this sense, a branch represents the tip of a series of commits—it's not a container for commits. The history for a branch is 
extrapolated through the commit relationships.

As you read, remember that Git branches aren't like SVN branches. Whereas SVN branches are only used to capture the occasional
large-scale development effort, Git branches are an integral part of your everyday workflow. The following content will expand on
the internal Git branching architecture.